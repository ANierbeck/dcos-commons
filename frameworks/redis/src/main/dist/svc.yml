name: {{FRAMEWORK_NAME}}
web-url: http://proxylite-0-server.{{FRAMEWORK_NAME}}.mesos:4040
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
  user: {{FRAMEWORK_USER}}
pods:
  redis:
    count: {{REDIS_COUNT}}
    placement: {{PLACEMENT_CONSTRAINTS}}
    container:
      image-name: nickbp/redis-test:1
      rlimits:
        RLIMIT_SIGPENDING:
          soft: 483022
          hard: 483022
        RLIMIT_NPROC:
          soft: 483022
          hard: 483022
        RLIMIT_NOFILE:
          soft: 100000
          hard: 100000
        RLIMIT_CORE: # unlimited
          soft:
          hard:
    uris:
      - {{BOOTSTRAP_URI}}
    tasks:
      server:
        goal: RUNNING
        # note: for debug step, we just do some parts manually, since '/opt/redislabs/bin/debug_mode on' is broken:
        cmd: >
          ${MESOS_SANDBOX}/bootstrap
          && echo USER $(whoami)
          {{#REDIS_DEBUG}}
          && echo ENABLING REDIS DEBUG
          && for PROCESS in cluster_wd node_wd cnm_exec cnm_http cnm_https cm_server redis_mgr resource_mgr alert_mgr; do
            echo - $PROCESS;
            echo "{ \"loggers\": { \"${PROCESS}\": { \"level\": \"DEBUG\" } } }" > ${PROCESS}_debug.conf;
          done
          {{/REDIS_DEBUG}}
          && echo PDNS CONFIG
          && mkdir -p /etc/opt/redislabs/pdns.conf.d/
          && echo "local-address=$(sh ${MESOS_SANDBOX}/get-ip.sh)" > /etc/opt/redislabs/pdns.conf.d/fixed-ip.conf
          && echo "local-port=5354" >> /etc/opt/redislabs/pdns.conf.d/fixed-ip.conf
          && ls -l /etc/opt/redislabs/pdns.conf.d/
          && cat /etc/opt/redislabs/pdns.conf.d/*
          && echo START RSYSLOGD
          && rm /var/run/rsyslogd.pid
          && rsyslogd
          && ls -l /dev/
          && ps aux
          && echo START REDIS
          && /opt/start.sh
        readiness-check:
          # TODO replace with a more valid check that supervisord is happy
          # $ sudo -u redislabs /opt/redislabs/bin/supervisorctl status
          # unix:///tmp/rlec_supervisord.sock refused connection
          cmd: >-
            INSTANCES=$(ps aux | grep bin/dmcproxy | grep -v grep)
            && echo INSTANCES $INSTANCES
            || [ -n "$INSTANCES" ]
          interval: 10
          delay: 15
          timeout: 60
        cpus: {{REDIS_CPUS}}
        memory: {{REDIS_MEM}}
        ports:
          # doc: https://redislabs.com/redis-enterprise-documentation/cluster-administration/best-practices/machine-ports-configuration/
          internal1:
            port-min: 3333
            port-max: 3337
          #internal2: (TODO these ports are not offered by mesos - set to other value in redis?)
          #  port-min: 36379
          #  port-max: 36380
          dns1:
            port: 5354 # TODO this would normally be port 53, which isn't offered by mesos anyway. see pdns config in command
          dns2:
            port: 5353
          web-ssl:
            port: 8443
          #rest: (TODO this port is not offered by mesos - set to other value in redis?)
          #  port: 8080
          rest-ssl:
            port: 9443
          db-external:
            port-min: {{PORT_EXTERNAL_MIN}}
            port-max: {{PORT_EXTERNAL_MAX}}
          db-internal:
            port-min: {{PORT_INTERNAL_MIN}}
            port-max: {{PORT_INTERNAL_MAX}}
        volume:
          path: /var/opt/redislabs/persist
          type: ROOT
          size: {{REDIS_DISK}}
        configs:
          sample.conf:
            template: {{CONFIG_TEMPLATE_PATH}}/sample.conf.tmpl
            dest: /mnt/mesos/sandbox/sample.conf
          get-ip.sh:
            template: {{CONFIG_TEMPLATE_PATH}}/get-ip.sh.tmpl
            dest: /mnt/mesos/sandbox/get-ip.sh
        env:
          PORT_EXTERNAL_MIN: {{PORT_EXTERNAL_MIN}}
          PORT_EXTERNAL_MAX: {{PORT_EXTERNAL_MAX}}
          PORT_INTERNAL_MIN: {{PORT_INTERNAL_MIN}}
          PORT_INTERNAL_MAX: {{PORT_INTERNAL_MAX}}
      config-init:
        goal: FINISHED
        cpus: 0.1
        memory: 32
        #TODO: provide "rack_id <id>" once dcos-commons supports exposing mesos agent attributes via env
        cmd: >
          LICENSE_FILE=$(mktemp)
          && echo "{{REDIS_LICENSE}}" > $LICENSE_FILE
          && echo TODO RUN /opt/redislabs/bin/rladmin cluster create name {{REDIS_CLUSTER_FQDN}} user {{REDIS_ADMIN_USER}} password {{REDIS_ADMIN_PASSWORD}} license_file $LICENSE_FILE
          && rm -f $LICENSE_FILE
      config-join:
        goal: FINISHED
        cpus: 0.1
        memory: 32
        #TODO: provide "rack_id <id>" once dcos-commons supports exposing mesos agent attributes via env
        #TODO: provide "replace_node <uid>" when replacing a prior node
        cmd: >
          ${MESOS_SANDBOX}/bootstrap -resolve-hosts redis-0-server.{{FRAMEWORK_NAME}}.mesos
          && TASK_ZERO_IP=$(python3 -c "import socket; print(socket.gethostbyname('redis-0-server.{{FRAMEWORK_NAME}}.mesos'))")
          && echo TODO RUN /opt/redislabs/bin/rladmin cluster join nodes $TASK_ZERO_IP username {{REDIS_ADMIN_USER}} password {{REDIS_ADMIN_PASSWORD}}
  proxylite:
    count: 1
    container:
      image-name: mesosphere/proxylite:2.0.0
    uris:
      - {{BOOTSTRAP_URI}}
    tasks:
      server:
        goal: RUNNING
        # Values for 'cmd' and 'env' are automatically filled in by Main.java.
        # We do this because the proxylite args/env both depend on the number of launched Redis nodes.
        cmd: echo If youre seeing this message, Main.java didnt update this task && exit 1
        cpus: 0.1
        memory: 100
        ports:
          proxylite:
            env-key: PORT_PROXYLITE
            port: 4040
plans:
  deploy:
    strategy: serial
    phases:
      redis-deploy:
        strategy: parallel
        pod: redis
        steps:
          - default: [[server]]
      proxylite-deploy:
        strategy: serial
        pod: proxylite
      redis-init:
        strategy: serial
        pod: redis
        steps:
          - 0: [[config-init]]
          - default: [[config-join]]
